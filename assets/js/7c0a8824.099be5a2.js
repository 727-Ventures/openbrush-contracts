"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[48665],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),u=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return o.createElement(c.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=u(t),m=a,f=l["".concat(c,".").concat(m)]||l[m]||p[m]||r;return t?o.createElement(f,i(i({ref:n},d),{},{components:t})):o.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<r;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3497:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:1,title:"Diamond Loupe"},i=void 0,s={unversionedId:"smart-contracts/diamond/Extensions/loupe",id:"version-3.2.0/smart-contracts/diamond/Extensions/loupe",title:"Diamond Loupe",description:"This example shows how you can reuse the implementation of Diamond Standard with Diamond Loupe extension, which allows you to iterate over diamond contract's facets and available functions.",source:"@site/versioned_docs/version-3.2.0/smart-contracts/diamond/Extensions/loupe.md",sourceDirName:"smart-contracts/diamond/Extensions",slug:"/smart-contracts/diamond/Extensions/loupe",permalink:"/openbrush-contracts/smart-contracts/diamond/Extensions/loupe",draft:!1,editUrl:"https://github.com/727-Ventures/openbrush-contracts/tree/main/docs/versioned_docs/version-3.2.0/smart-contracts/diamond/Extensions/loupe.md",tags:[],version:"3.2.0",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Diamond Loupe"},sidebar:"tutorialSidebar",previous:{title:"Diamond Standard",permalink:"/openbrush-contracts/smart-contracts/diamond/"},next:{title:"Pausable",permalink:"/openbrush-contracts/smart-contracts/pausable"}},c={},u=[{value:"How to use this extension",id:"how-to-use-this-extension",level:2},{value:"Find result",id:"find-result",level:2}],d={toc:u},l="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/upgradeability/diamond"},"Diamond Standard")," with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/blob/main/contracts/src/upgradeability/diamond/extensions/diamond_loupe.rs"},"Diamond Loupe")," extension, which allows you to iterate over diamond contract's facets and available functions."),(0,a.kt)("h2",{id:"how-to-use-this-extension"},"How to use this extension"),(0,a.kt)("p",null,"First, you should implement basic version of ",(0,a.kt)("a",{parentName:"p",href:"/openbrush-contracts/smart-contracts/diamond/"},"Diamond standard"),"."),(0,a.kt)("p",null,"After you can just add implementation of DiamondLoupe via ",(0,a.kt)("inlineCode",{parentName:"p"},"#[openbrush::implementation(Diamond, DiamondLoupe)]")," attribute."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(Diamond, DiamondLoupe)]\n#[openbrush::contract]\npub mod my_diamond_loupe {\n    ...\n')),(0,a.kt)("h2",{id:"find-result"},"Find result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(Ownable, Diamond, DiamondLoupe)]\n#[openbrush::contract]\npub mod diamond {\n    use openbrush::{\n        modifiers,\n        traits::Storage,\n    };\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        ownable: ownable::Data,\n        #[storage_field]\n        diamond: diamond::Data,\n        #[storage_field]\n        loupe: diamond_loupe::Data,\n    }\n\n    #[default_impl(Diamond)]\n    #[modifiers(only_owner)]\n    fn diamond_cut() {}\n\n    impl Contract {\n        #[ink(constructor)]\n        pub fn new(owner: AccountId) -> Self {\n            let mut instance = Self::default();\n            ownable::Internal::_init_with_owner(&mut instance, owner);\n\n            instance\n        }\n\n        #[ink(message, payable, selector = _)]\n        pub fn forward(&self) {\n            diamond::Internal::_fallback(self)\n        }\n    }\n}\n')),(0,a.kt)("p",null,"And that's it! Your ",(0,a.kt)("inlineCode",{parentName:"p"},"Diamond")," is now extended by the ",(0,a.kt)("inlineCode",{parentName:"p"},"DiamondLoupe")," extension and ready to use its functions!\nYou can check an example of the usage of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/examples/diamond"},"Diamond Loupe"),"."))}p.isMDXComponent=!0}}]);