#![cfg_attr(not(feature = "std"), no_std, no_main)]

macro_rules! supported_interfaces {
    ($contract:ident => $($interface_id:expr),*) => {
        impl ::openbrush::contracts::psp61::PSP61Internal for $contract {
            fn _interfaces(&self) -> ::ink::prelude::vec::Vec<u32> {
                use ::ink::prelude::vec;

                vec![$($interface_id),*]
            }
        }
    };
}

// #[openbrush::implementation()]
#[openbrush::contract]
pub mod my_psp61 {
    use openbrush::contracts::psp61;
    use openbrush::traits::Storage;

    #[ink(storage)]
    #[derive(Default, Storage)]
    pub struct Contract {
        #[storage_field]
        psp61: psp61::Data,
    }

    // impl psp61::PSP61Internal for Contract {}

    /// Will be generated by #[openbrush::implementation]
    impl psp61::PSP61InternalOB for Contract {}

    /// Will be generated by #[openbrush::implementation]
    impl psp61::PSP61Impl for Contract {} //

    /// Will be generated by #[openbrush::implementation]
    impl psp61::PSP61 for Contract {
        #[ink(message)]
        fn supports_interface(&self, interface_id: u32) -> bool {
            psp61::PSP61Impl::supports_interface(self, interface_id)
        }
    }

    supported_interfaces!(
        Contract =>
            psp61::psp61_external::TRAIT_ID,
            psp61::psp61_external::TRAIT_ID
    );

    impl Contract {
        #[ink(constructor)]
        pub fn new() -> Self {
            let mut instance = Self::default();

            psp61::PSP61Impl::init(&mut instance);

            instance
        }
    }
    /// Unit tests in Rust are normally defined within such a `#[cfg(test)]`
    /// module and test functions are marked with a `#[test]` attribute.
    /// The below code is technically just normal Rust code.
    #[cfg(test)]
    mod tests {
        /// Imports all the definitions from the outer scope so we can use them here.
        use super::*;

        /// We test a simple use case of our contract.
        #[ink::test]
        fn it_works() {
            let mut asda = Asda::new(false);
        }
    }
}
